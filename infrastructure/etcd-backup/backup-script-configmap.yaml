---
apiVersion: v1
kind: ConfigMap
metadata:
  name: etcd-backup-script
  namespace: etcd-backup
data:
  backup.sh: |
    #!/bin/sh
    set -euo pipefail
    
    # Configuration from environment
    BACKUP_DIR="/tmp"
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_FILE="${BACKUP_DIR}/etcd-snapshot-${TIMESTAMP}.db"
    TALOS_NODE="192.168.1.221"  # Primary node for snapshots
    RETENTION_DAYS=14
    
    echo "=== Starting etcd backup at $(date) ==="
    
    
    # Set up s3cmd parameters
    S3CMD_HOST=$(echo "${AWS_ENDPOINT}" | sed 's|https\?://||')
    S3CMD_ARGS="--access_key=${AWS_ACCESS_KEY_ID} --secret_key=${AWS_SECRET_ACCESS_KEY} --host=${S3CMD_HOST} --host-bucket=${S3CMD_HOST}"
    
    # Test S3 connection
    echo "Testing S3 connection..."
    if ! s3cmd ${S3CMD_ARGS} ls s3://${BUCKET_NAME}/ >/dev/null 2>&1; then
        echo "‚ùå ERROR: Cannot connect to S3 bucket!"
        exit 1
    fi
    echo "‚úÖ S3 connection successful"

    # Create etcd snapshot using restricted credentials
    echo "Creating etcd snapshot..."
    export TALOSCONFIG=/etc/talos/talosconfig
    echo "Running talosctl..."
    if talosctl etcd snapshot "${BACKUP_FILE}" --nodes "${TALOS_NODE}"; then
        BACKUP_SIZE=$(du -h "${BACKUP_FILE}" | cut -f1)
        echo "‚úÖ Backup created successfully: ${BACKUP_FILE} (${BACKUP_SIZE})"
    else
        echo "‚ùå ERROR: Failed to create etcd snapshot!"
        exit 1
    fi
    
    # Upload to S3
    echo "Uploading backup to S3..."
    REMOTE_PATH="s3://${BUCKET_NAME}/etcd-snapshot-${TIMESTAMP}.db"
    if s3cmd ${S3CMD_ARGS} put "${BACKUP_FILE}" "${REMOTE_PATH}"; then
        echo "‚úÖ Backup uploaded successfully to ${REMOTE_PATH}"
    else
        echo "‚ùå ERROR: Failed to upload backup to S3!"
        exit 1
    fi
    
    # Clean up local file
    rm -f "${BACKUP_FILE}"
    echo "üßπ Local backup file cleaned up"
    
    # Clean up old backups in S3 (keep last 14 days)
    echo "Cleaning up old backups (retention: ${RETENTION_DAYS} days)..."
    echo "Looking for backups older than ${RETENTION_DAYS} days..."
    CUTOFF_DATE=$(date -d "@$(($(date +%s) - ${RETENTION_DAYS} * 86400))" +%Y%m%d)
    s3cmd ${S3CMD_ARGS} ls s3://${BUCKET_NAME}/ | grep "etcd-snapshot-" | while read -r line; do
        BACKUP_FILE=$(echo "$line" | awk '{print $4}')
        BACKUP_DATE=$(echo "$BACKUP_FILE" | sed -n 's/.*etcd-snapshot-\([0-9]\{8\}\)_.*/\1/p')
        if [ -n "$BACKUP_DATE" ] && [ "$BACKUP_DATE" -lt "$CUTOFF_DATE" ]; then
            echo "üóëÔ∏è  Deleting old backup: $(basename "$BACKUP_FILE")"
            s3cmd ${S3CMD_ARGS} del "$BACKUP_FILE" || echo "‚ö†Ô∏è  Failed to delete $BACKUP_FILE"
        fi
    done
    
    # List current backups
    echo "üìã Current backups:"
    s3cmd ${S3CMD_ARGS} ls s3://${BUCKET_NAME}/ | grep etcd-snapshot || echo "No etcd backups found"
    
    echo "=== ‚úÖ Backup completed successfully at $(date) ==="
