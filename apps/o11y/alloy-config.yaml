---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: o11y
data:
  config.alloy: |
    // Discover Kubernetes API server
    discovery.kubernetes "api_server" {
      role = "endpoints"
      namespaces {
        own_namespace = false
        names = ["default"]
      }
      selectors {
        role = "endpoints"
        label = "component=apiserver"
      }
    }

    // Discover kubelet metrics
    discovery.kubernetes "kubelet" {
      role = "node"
    }

    // Discover pods for container metrics
    discovery.kubernetes "pods" {
      role = "pod"
    }

    // Discover services for service discovery
    discovery.kubernetes "services" {
      role = "service"
    }

    // Scrape kubelet metrics
    prometheus.scrape "kubelet" {
      targets = discovery.kubernetes.kubelet.targets
      forward_to = [prometheus.remote_write.mimir.receiver]
      
      job_name = "kubelet"
      scheme = "https"
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
      }
      
      scrape_interval = "30s"
      metrics_path = "/metrics"
    }

    // Scrape kubelet cadvisor metrics (container metrics)
    prometheus.scrape "kubelet_cadvisor" {
      targets = discovery.kubernetes.kubelet.targets
      forward_to = [prometheus.remote_write.mimir.receiver]
      
      job_name = "kubelet-cadvisor"
      scheme = "https"
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
      }
      
      scrape_interval = "30s"
      metrics_path = "/metrics/cadvisor"
    }

    // Scrape API server metrics
    prometheus.scrape "api_server" {
      targets = discovery.kubernetes.api_server.targets
      forward_to = [prometheus.remote_write.mimir.receiver]
      
      job_name = "apiserver"
      scheme = "https"
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
      }
      
      scrape_interval = "30s"
    }

    // Discover pods with Prometheus annotations
    discovery.kubernetes "annotated_pods" {
      role = "pod"
    }

    // Scrape pods that have prometheus.io/scrape=true annotation
    prometheus.scrape "annotated_pods" {
      targets = discovery.relabel.annotated_pods.output
      forward_to = [prometheus.remote_write.mimir.receiver]
      scrape_interval = "30s"
    }

    // Relabel to only scrape annotated pods and use their annotations
    discovery.relabel "annotated_pods" {
      targets = discovery.kubernetes.annotated_pods.targets

      // Only scrape pods with prometheus.io/scrape=true
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
        action = "keep"
        regex = "true"
      }

      // Use custom metrics path if specified
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path"]
        action = "replace"
        target_label = "__metrics_path__"
        regex = "(.+)"
      }

      // Use custom port if specified
      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_prometheus_io_port"]
        action = "replace"
        regex = "([^:]+)(?::\\d+)?;(\\d+)"
        replacement = "$1:$2"
        target_label = "__address__"
      }

      // Add job name based on pod labels (try both label formats)
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        action = "replace"
        target_label = "job"
        regex = "(.+)"
      }
      
      // Fallback to simple app label for Flux controllers
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app"]
        action = "replace"
        target_label = "job"
        regex = "(.+)"
      }

      // Add namespace label
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }

      // Add pod name label
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }
    }

    // Remote write to Mimir
    prometheus.remote_write "mimir" {
      endpoint {
        url = "http://mimir-nginx.o11y.svc:80/api/v1/push"
      }
      
      // Add cluster label to all metrics
      external_labels = {
        cluster = "home-cluster",
      }
    }