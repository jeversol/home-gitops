apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: mimir
  namespace: flux-system
spec:
  interval: 30m
  releaseName: mimir
  targetNamespace: o11y
  driftDetection:
    mode: warn
    ignore:
      - paths: ["/spec/replicas"]
        target:
          kind: Deployment
      - paths: ["/spec/replicas"]
        target:
          kind: StatefulSet
  chart:
    spec:
      chart: mimir-distributed
      version: "5.7.0"
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    # Mimir configuration
    # Use environment variables for S3 credentials
    global:
      extraEnvFrom:
        - secretRef:
            name: mimir-minio-secret
    mimir:
      configStorageType: ConfigMap
      externalConfigName: mimir-custom-config
    # Disable built-in MinIO since we're using external S3
    minio:
      enabled: false
    # Component resource configuration for your cluster
    ingester:
      replicas: 2
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
        limits:
          memory: 1Gi
      persistentVolume:
        size: 10Gi
        storageClass: "longhorn"
      service:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "8080"
    store_gateway:
      replicas: 1
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          memory: 512Mi
      persistentVolume:
        size: 5Gi
        storageClass: "longhorn"
    compactor:
      replicas: 1
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          memory: 512Mi
      persistentVolume:
        size: 5Gi
        storageClass: "longhorn"
    querier:
      replicas: 1
      resources:
        requests:
          cpu: 250m
          memory: 256Mi
        limits:
          memory: 1024Mi
      service:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "8080"
    query_frontend:
      replicas: 1
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          memory: 256Mi
      service:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "8080"
    query_scheduler:
      replicas: 1
      resources:
        requests:
          cpu: 50m
          memory: 128Mi
        limits:
          memory: 256Mi
    distributor:
      replicas: 1
      resources:
        requests:
          cpu: 500m
          memory: 256Mi
        limits:
          memory: 1024Mi
      service:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "8080"
    ruler:
      replicas: 1
      resources:
        requests:
          cpu: 50m
          memory: 128Mi
        limits:
          memory: 512Mi
    alertmanager:
      replicas: 1
      resources:
        requests:
          cpu: 50m
          memory: 128Mi
        limits:
          memory: 512Mi
      persistentVolume:
        size: 2Gi
        storageClass: "longhorn"
    # Nginx gateway for internal load balancing
    nginx:
      replicas: 1
      resources:
        requests:
          cpu: 50m
          memory: 64Mi
        limits:
          memory: 128Mi
      service:
        type: ClusterIP
        port: 80
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "8080"
